PROBLEM LINK: https://leetcode.com/problems/implement-queue-using-stacks/


SOLUTION:


/** Initialize your data structure here. */
    stack<int> s1, s2;
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        /*if(s1.size() == 0 & s2.size()>0){
            while(!s2.empty()){
                s1.push(s2.top());
                s2.pop();
            }
            s1.push(x);
        }
        else if(s1.size()>0 & s2.size() == 0)   
            s1.push(x);*/
        s1.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        while(!s1.empty()){
            s2.push(s1.top());
            s1.pop();
        }
        int a = s2.top();
        s2.pop();
        
        while(!s2.empty()){
            s1.push(s2.top());
            s2.pop();
        }
        
        return a;        
    }
    
    /** Get the front element. */
    int peek() {
        while(!s1.empty()){
            s2.push(s1.top());
            s1.pop();
        }
        int b = s2.top();
            
        while(!s2.empty()){
            s1.push(s2.top());
            s2.pop();
        }
        
        return b;         
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        if(s1.size() == 0) return true;
        else return false;
    }
    
    
    
    
    
    
    
